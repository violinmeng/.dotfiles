# config template
# https://github.com/alacritty/alacritty/blob/master/alacritty.yml
env:
  TERM: xterm-256color

window:
  dynamic_title: true
  dimensions:
    columns: 0
    lines: 0

  position:
   x: 0
   y: 0

  dynamic_padding: false

  decorations: none

  startup_mode: Fullscreen

  title: Alacritty


scrolling:
  history: 50000
  multiplier: 3

font:
  normal:
    family: "FiraCode Nerd Font"
    style: Retina

  bold:
    family: "FiraCode Nerd Font"
    style: Bold

  italic:
    family: Menlo
    style: Italic

  size: 16

  offset:
    x: 1
    y: 0

draw_bold_text_with_bright_colors: false

scheme: &darcula
    primary:
      background: '0x282a36'
      foreground: '0xf8f8f2'
    normal:
      black:   '0x000000'
      red:     '0xff5555'
      green:   '0x50fa7b'
      yellow:  '0xf1fa8c'
      blue:    '0xcaa9fa'
      magenta: '0xff79c6'
      cyan:    '0x8be9fd'
      white:   '0xbfbfbf'
    bright:
      black:   '0x282a35'
      red:     '0xff6e67'
      green:   '0x5af78e'
      yellow:  '0xf4f99d'
      blue:    '0xcaa9fa'
      magenta: '0xff92d0'
      cyan:    '0x9aedfe'
      white:   '0xe6e6e6'
  
colors: *darcula


# 终端响铃
#
# 配置接收到 BEL 控制字符后的
# 每当接收到BEL控制字符时，钟就会响起。
# bell:
  # 动画效果
  #
  # 可以为下面的值，可以设置后自己感受:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  # animation: EaseOutExpo

  # 动画闪烁的持续时间（以毫秒为单位）。设置为 0 表示禁用动画效果
  # duration: 0

  # 动画颜色.
  # color: '#ffffff'

  # 响铃后执行的命令， 配置为 None 则不执行任何命令
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  # command: None


# 背景不透明度
#
# 窗口不透明度，区间为从0.0到1.0的浮点数。0.0 完全头名，1.0 则完全不透明
window.opacity: 0.95

selection:  
  # 分割语义化单词的分隔符，这个会影响到鼠标双击左键的单词选中。
  # 比如 @ 作为分割 username 和 password 的字符，默认配置里面竞是没有的。。。
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t@="

  # 选中文本后是否复制到主剪贴板，关于主剪贴板是啥可以参考 https://wiki.archlinux.org/index.php/clipboard
  save_to_clipboard: false


# 光标配置
cursor:  
  # 光标样式
  style:
    # 光标形状
    #
    # 可以为下面的值:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block

    # 光标闪烁状态
    #
    # 可以为下面的值:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Off

  # Vi 模式下的光标样式
  # 同上面的配置项，如果设置为 None 那么会使用普通模式下的光标配置
  vi_mode_style: None

  # 毫秒为单位的光标闪烁间隔
  # blink_interval: 750

  # 如果为true，则当窗口未聚焦时，光标将显示为空心框。 
  # unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# 是否启用配置热更新
live_config_reload: true


# Shell
#
# 随终端打开时启动的 Shell
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
  program: /bin/zsh
  args:
    - -l
    - -c
    - "source ~/.zshrc; tmux attach 2> /dev/null || tmux -f ~/.config/tmux/tmux.conf"

# 启动时的目录
#
# 如果是 None 那么会使用父进程的工作目录
# working_directory: None

# Alt 和字符连按的时候发送 ESC (\x1b) 
# alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"

    # List with all available hints
    #
    # Each hint must have a `regex` and either an `action` or a `command` field.
    # The fields `mouse`, `binding` and `post_processing` are optional.
    #
    # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
    # `mouse.mods` accept the same values as they do in the `key_bindings` section.
    #
    # The `mouse.enabled` field controls if the hint should be underlined while
    # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
    #
    # If the `post_processing` field is set to `true`, heuristics will be used to
    # shorten the match if there are characters likely not to be part of the hint
    # (e.g. a trailing `.`). This is most useful for URIs.
    #
    # Values for `action`:
    #   - Copy
    #       Copy the hint's text to the clipboard.
    #   - Paste
    #       Paste the hint's text to the terminal or search.
    #   - Select
    #       Select the hint's text.
    #   - MoveViModeCursor
    #       Move the vi mode cursor to the beginning of the hint.
  enabled:
    - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
              [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
      command: open
      post_processing: true
      mouse:
        enabled: true
      mods: None
      # binding:
        # key: U
      # mods: Control|Shift

# Mouse bindings
#
# 配置鼠标动作绑定，和键盘绑定类似。详细配置可以参考 Key bindings 一节
# 
# 为了在 Alacritty 中运行的应用程序捕获鼠标时触发鼠标绑定，会自动添加 Shift 修饰符。 
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
# mouse_bindings:
# - { mouse: Middle, action: PasteSelection } # 按鼠标中键粘贴选中内容


# Key bindings
#
# 按键绑定是对象列表。比如西面的是默认的粘贴的键位绑定
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: 需要按到的键盘码
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    键盘码可以从下面找到
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#    这里对于不清楚键盘上每个键的英文名称的同学，可以参考
#    https://www.computerhope.com/jargon/b/backquot.htm
#
#    除了使用按键的名字之外，还支持使用所需键的 scancode。不过必须为十进制数字。下面的命令会显示十六进制的 scancode
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: 发送字节序列到正在运行的应用程序 
#
#    char 字段可以将指定的字符串写入终端。这功能可以用在传递转义序列中。
#    想要找到诸如  `PageUp` (`"\x1b[5~"`) 这样的转义字符，可以通过 `showkey -a` 命令
#    `xxd -psd` 命令也可以做到
#
# - `action`: 执行预定义的操作
#
#   - ToggleViMode: 开启/关闭 Vi 模式
#   - SearchForward: 向前搜索
#   - SearchBackward: 向后搜索
#   - Copy: 复制
#   - Paste: 粘贴
#   - IncreaseFontSize: 增加字号
#   - DecreaseFontSize: 减小字号
#   - ResetFontSize: 重置字号
#   - ScrollPageUp: 向上翻一页
#   - ScrollPageDown: 向下翻一页
#   - ScrollHalfPageUp: 向上翻半页
#   - ScrollHalfPageDown: 向下翻半页
#   - ScrollLineUp: 向上滚动一行
#   - ScrollLineDown: 向下滚动一行
#   - ScrollToTop: 滚动到顶部
#   - ScrollToBottom: 滚动到底部
#   - ClearHistory: 清空滚动缓冲区
#   - Hide: 隐藏窗口
#   - Minimize: 最小化
#   - Quit: 退出
#   - ToggleFullscreen: 在全屏/当前模式下切换
#   - SpawnNewInstance: 启动一个新的 Alacritty
#   - ClearLogNotice: 清 UI 上的 warning 和 error 的 notice
#   - ClearSelection: 清空当前选中
#   - ReceiveChar: 不执行任何动作，将字符输入
#   - None: 不执行任何动作，并且拦截掉
#
# - Vi 模式下独占的操作

#   - Open: 打开一个链接，launcher 的配置参考 `url.launcher`
#   - ToggleNormalSelection: 切换到普通选中模式
#   - ToggleLineSelection: 切换到行选中模式
#   - ToggleBlockSelection: 切换到块选中模式
#   - ToggleSemanticSelection: 切换到语义选中模式，参考  `selection.semantic_escape_chars`.
#
# - Vi 模式下独占的光标操作:
#
#   - Up: 向上一行
#   - Down: 向下一行
#   - Left: 向左一个字符
#   - Right: 向右一个字符
#   - First: 第一列，如果已经在第一列，那么到起始行
#   - Last: 最后一列，如果已经在最后一列，那么到起始行
#   - FirstOccupied: 此终端行中的第一个非空单元格，如果已经位于该行的第一个单元格时，那么该行的第一个非空单元格
#   - High: 屏幕最上方
#   - Middle: 屏幕中间
#   - Low: 屏幕底部
#   - SemanticLeft: 前一个在被语义上分隔的单词的开头
#   - SemanticRight: 下一个在被语义上分隔的单词的开头
#   - SemanticLeftEnd:  前一个被语义上分隔的单词的结尾
#   - SemanticRightEnd: 下一个被语义上分隔的单词的结尾
#   - WordLeft: 前一个被空白符分隔的单词的开头
#   - WordRight: 下一个被空白符分隔的单词的开头
#   - WordLeftEnd: 前一个被空白符分隔的单词的结尾
#   - WordRightEnd: 下一个被空白符分隔的单词的结尾
#   - Bracket: 与光标所在位置的括号匹配的字符
#   - SearchNext: 向后搜索
#   - SearchPrevious: 向前搜索
#   - SearchStart: vi 模式光标左侧的首次匹配
#   - SearchEnd: vi 模式光标右侧的最后匹配
#
# - 搜索模式独占的操作:
#   - SearchFocusNext: 将焦点移到下一个搜索匹配项。
#   - SearchFocusPrevious: 将焦点移到上一个搜索匹配项。
#   - SearchConfirm: 确认搜索
#   - SearchCancel: 取消搜索
#   - SearchClear: 清空搜索内容
#   - SearchDeleteWord: 删除搜索内容的最后一个单词
#   - SearchHistoryPrevious: 跳转搜索内容历史的上一个
#   - SearchHistoryNext: 跳转搜索内容历史的下一个
#
# - macos 独占的操作:
#   - ToggleSimpleFullscreen: Enter fullscreen without occupying another space.
#
# - Linux/BSD 独占的操作:
#
#   - CopySelection: 从选中缓冲区中复制
#   - PasteSelection: 从选中缓冲区中粘贴
#
# - `command`: 执行命令
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# 可选的:
#
# - `mods`: 修饰键
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    多个修饰键使用 `|` 进行组合，像这样:
#       `mods: Control|Shift`.
#
# - `mode`: 对于指定的模式下进行绑定。用于在不同模式下向应用程序发送正确的转义序列
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` 操作符，用于逻辑取反
#
# Alacritty 有默认的键位绑定，如果想要替换需要使用新的绑定进行覆盖。如果想取消默认的绑定，，可以映射到 `ReceiveChar`。
# 另外，如果不希望接收该绑定的输入字符，可以映射到 `None`。
# 如果相同的触发键位，有多个 action，那么会顺序执行

# 下面是我的键位绑定，使用 Tmux。通过转义序列触发 tmux 的 prefix 和快捷键位
# Tmux 和 Alacritty 集成可以参考 https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/
key_bindings:  
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: N,        mods: Command, command: { program: "open", args: ["-nb", "io.alacritty"] } }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
  - { key: F1,       mods: Command, chars: "\x1b[1;3P"                   }
  - { key: F2,       mods: Command, chars: "\x1b[1;3Q"                   }
  - { key: F3,       mods: Command, chars: "\x1b[1;3R"                   }
  - { key: F4,       mods: Command, chars: "\x1b[1;3S"                   }
  - { key: F5,       mods: Command, chars: "\x1b[15;3~"                  }
  - { key: F6,       mods: Command, chars: "\x1b[17;3~"                  }
  - { key: F7,       mods: Command, chars: "\x1b[18;3~"                  }
  - { key: F8,       mods: Command, chars: "\x1b[19;3~"                  }
  - { key: F9,       mods: Command, chars: "\x1b[20;3~"                  }
  - { key: F10,      mods: Command, chars: "\x1b[21;3~"                  }
  - { key: F11,      mods: Command, chars: "\x1b[23;3~"                  }
  - { key: F12,      mods: Command, chars: "\x1b[24;3~"                  }
  - { key: D,        mods: Command,       chars: "\x02\x25" }
  - { key: D,        mods: Command|Shift, chars: "\x02\x22" }
  - { key: X,        mods: Command,       chars: "\x02\x78" }
  - { key: H,        mods: Command,       chars: "\x02\x1b\x5b\x44" }
  - { key: J,        mods: Command,       chars: "\x02\x1b\x5b\x42" }
  - { key: K,        mods: Command,       chars: "\x02\x1b\x5b\x41" }
  - { key: L,        mods: Command,       chars: "\x02\x1b\x5b\x43" }
  - { key: T,        mods: Command,       chars: "\x02\x63" }
  - { key: RBracket, mods: Command|Shift, chars: "\x06\x6e" }
  - { key: LBracket, mods: Command|Shift, chars: "\x06\x70" }
  - { key: Return,   mods: Command|Shift, chars: "\x02\x7a" }
  - { key: Key1,     mods: Command,       chars: "\x06\x31" }
  - { key: Key2,     mods: Command,       chars: "\x06\x32" }
  - { key: Key3,     mods: Command,       chars: "\x06\x33" }
  - { key: Key4,     mods: Command,       chars: "\x06\x34" }
  - { key: Key5,     mods: Command,       chars: "\x06\x35" }
  - { key: Key6,     mods: Command,       chars: "\x06\x36" }
  - { key: Key7,     mods: Command,       chars: "\x06\x37" }
  - { key: Key8,     mods: Command,       chars: "\x06\x38" }
  - { key: Key9,     mods: Command,       chars: "\x06\x39" }
  - { key: Left,     mods: Command,       chars: "\x06\x48" }
  - { key: Down,     mods: Command,       chars: "\x06\x4a" }
  - { key: Up,       mods: Command,       chars: "\x06\x4b" }
  - { key: Right,    mods: Command,       chars: "\x06\x4c" }

# 不使用 tmux 可以参考这份
# key_bindings:
  #- { key: LBracket,                    mods: Command,    action: ToggleViMode            }
  #- { key: U,      mods: Command,       mode: ~Vi|~Search,action: ScrollHalfPageUp        }
  #- { key: D,      mods: Command,       mode: ~Vi|~Search,action: ScrollHalfPageDown      }
  #- { key: LBracket,  mods: Control,mode: Vi|~Search,     action: ClearSelection          }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }


# 调试
# debug:
  # 显示没帧重绘所使用的时间
  # render_timer: false

  # 持久化日志
  #persistent_logging: false

  # 日志级别
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  # log_level: Warn

  # 输出所有接收到的窗口事件
  # print_events: false
